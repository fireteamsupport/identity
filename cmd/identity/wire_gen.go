// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/fireteamsupport/identity/internal/database"
	"github.com/fireteamsupport/identity/internal/email"
	"github.com/fireteamsupport/identity/internal/initializer"
	"github.com/fireteamsupport/identity/internal/jwtmanager"
	"github.com/fireteamsupport/identity/internal/rtmanager"
	"github.com/fireteamsupport/identity/internal/store"
	"github.com/fireteamsupport/identity/internal/validation"
	"github.com/google/wire"
)

// Injectors from wire.go:

func Stores() (*initializer.Stores, error) {
	client, err := database.NewDefault()
	if err != nil {
		return nil, err
	}
	userStore, err := store.NewUserStore(client)
	if err != nil {
		return nil, err
	}
	refreshTokenStore, err := store.NewRefreshTokenStore(client)
	if err != nil {
		return nil, err
	}
	passwordResetStore, err := store.NewPasswordResetStore(client)
	if err != nil {
		return nil, err
	}
	accountVerificationStore, err := store.NewAccountVerificationStore(client)
	if err != nil {
		return nil, err
	}
	stores := &initializer.Stores{
		DB:                  client,
		User:                userStore,
		RefreshToken:        refreshTokenStore,
		PasswordReset:       passwordResetStore,
		AccountVerification: accountVerificationStore,
	}
	return stores, nil
}

func Rest() (*initializer.Rest, error) {
	client, err := database.NewDefault()
	if err != nil {
		return nil, err
	}
	userStore, err := store.NewUserStore(client)
	if err != nil {
		return nil, err
	}
	refreshTokenStore, err := store.NewRefreshTokenStore(client)
	if err != nil {
		return nil, err
	}
	passwordResetStore, err := store.NewPasswordResetStore(client)
	if err != nil {
		return nil, err
	}
	accountVerificationStore, err := store.NewAccountVerificationStore(client)
	if err != nil {
		return nil, err
	}
	stores := &initializer.Stores{
		DB:                  client,
		User:                userStore,
		RefreshToken:        refreshTokenStore,
		PasswordReset:       passwordResetStore,
		AccountVerification: accountVerificationStore,
	}
	jwtManager, err := jwtmanager.NewDefault()
	if err != nil {
		return nil, err
	}
	emailEmail, err := email.NewDefault()
	if err != nil {
		return nil, err
	}
	validate, err := validation.NewDefault()
	if err != nil {
		return nil, err
	}
	rtManager, err := rtmanager.New(refreshTokenStore)
	if err != nil {
		return nil, err
	}
	rest := &initializer.Rest{
		Store:    stores,
		JWT:      jwtManager,
		Email:    emailEmail,
		Validate: validate,
		RT:       rtManager,
	}
	return rest, nil
}

// wire.go:

var (
	storeSet = wire.NewSet(database.NewDefault, store.NewUserStore, store.NewAccountVerificationStore, store.NewPasswordResetStore, store.NewRefreshTokenStore, wire.Struct(new(initializer.Stores), "*"))

	restSet = wire.NewSet(
		storeSet, jwtmanager.NewDefault, rtmanager.New, validation.NewDefault, email.NewDefault, wire.Struct(new(initializer.Rest), "*"),
	)
)
